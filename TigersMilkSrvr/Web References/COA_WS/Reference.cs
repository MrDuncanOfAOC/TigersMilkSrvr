//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TigersMilkSrvr.COA_WS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="COAReportServiceSoap", Namespace="http://www.aoc-resins.com/WebServices")]
    public partial class COAReportService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCoaDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCoaDocumentsByAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMSDSDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestAuthenticatedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public COAReportService() {
            this.Url = global::TigersMilkSrvr.Properties.Settings.Default.TigersMilkSrvr_COA_WS_COAReportService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCoaDocumentsCompletedEventHandler GetCoaDocumentsCompleted;
        
        /// <remarks/>
        public event GetCoaDocumentsByAppCompletedEventHandler GetCoaDocumentsByAppCompleted;
        
        /// <remarks/>
        public event GetMSDSDocumentsCompletedEventHandler GetMSDSDocumentsCompleted;
        
        /// <remarks/>
        public event TestAuthenticatedCompletedEventHandler TestAuthenticatedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aoc-resins.com/WebServices/GetCoaDocuments", RequestNamespace="http://www.aoc-resins.com/WebServices", ResponseNamespace="http://www.aoc-resins.com/WebServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DocumentPath")]
        public string GetCoaDocuments(string strBOL_NO, out string DocumentNames) {
            object[] results = this.Invoke("GetCoaDocuments", new object[] {
                        strBOL_NO});
            DocumentNames = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoaDocumentsAsync(string strBOL_NO) {
            this.GetCoaDocumentsAsync(strBOL_NO, null);
        }
        
        /// <remarks/>
        public void GetCoaDocumentsAsync(string strBOL_NO, object userState) {
            if ((this.GetCoaDocumentsOperationCompleted == null)) {
                this.GetCoaDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoaDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetCoaDocuments", new object[] {
                        strBOL_NO}, this.GetCoaDocumentsOperationCompleted, userState);
        }
        
        private void OnGetCoaDocumentsOperationCompleted(object arg) {
            if ((this.GetCoaDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoaDocumentsCompleted(this, new GetCoaDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aoc-resins.com/WebServices/GetCoaDocumentsByApp", RequestNamespace="http://www.aoc-resins.com/WebServices", ResponseNamespace="http://www.aoc-resins.com/WebServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DocumentPath")]
        public string GetCoaDocumentsByApp(string strBOL_NO, string STR_FROM_APP, out string DocumentNames) {
            object[] results = this.Invoke("GetCoaDocumentsByApp", new object[] {
                        strBOL_NO,
                        STR_FROM_APP});
            DocumentNames = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCoaDocumentsByAppAsync(string strBOL_NO, string STR_FROM_APP) {
            this.GetCoaDocumentsByAppAsync(strBOL_NO, STR_FROM_APP, null);
        }
        
        /// <remarks/>
        public void GetCoaDocumentsByAppAsync(string strBOL_NO, string STR_FROM_APP, object userState) {
            if ((this.GetCoaDocumentsByAppOperationCompleted == null)) {
                this.GetCoaDocumentsByAppOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCoaDocumentsByAppOperationCompleted);
            }
            this.InvokeAsync("GetCoaDocumentsByApp", new object[] {
                        strBOL_NO,
                        STR_FROM_APP}, this.GetCoaDocumentsByAppOperationCompleted, userState);
        }
        
        private void OnGetCoaDocumentsByAppOperationCompleted(object arg) {
            if ((this.GetCoaDocumentsByAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCoaDocumentsByAppCompleted(this, new GetCoaDocumentsByAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aoc-resins.com/WebServices/GetMSDSDocuments", RequestNamespace="http://www.aoc-resins.com/WebServices", ResponseNamespace="http://www.aoc-resins.com/WebServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("MSDSDocumentPath")]
        public string GetMSDSDocuments(string DocumentId, out string MSDSDocumentName) {
            object[] results = this.Invoke("GetMSDSDocuments", new object[] {
                        DocumentId});
            MSDSDocumentName = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMSDSDocumentsAsync(string DocumentId) {
            this.GetMSDSDocumentsAsync(DocumentId, null);
        }
        
        /// <remarks/>
        public void GetMSDSDocumentsAsync(string DocumentId, object userState) {
            if ((this.GetMSDSDocumentsOperationCompleted == null)) {
                this.GetMSDSDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMSDSDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetMSDSDocuments", new object[] {
                        DocumentId}, this.GetMSDSDocumentsOperationCompleted, userState);
        }
        
        private void OnGetMSDSDocumentsOperationCompleted(object arg) {
            if ((this.GetMSDSDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMSDSDocumentsCompleted(this, new GetMSDSDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.aoc-resins.com/WebServices/TestAuthenticated", RequestNamespace="http://www.aoc-resins.com/WebServices", ResponseNamespace="http://www.aoc-resins.com/WebServices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestAuthenticated() {
            object[] results = this.Invoke("TestAuthenticated", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestAuthenticatedAsync() {
            this.TestAuthenticatedAsync(null);
        }
        
        /// <remarks/>
        public void TestAuthenticatedAsync(object userState) {
            if ((this.TestAuthenticatedOperationCompleted == null)) {
                this.TestAuthenticatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestAuthenticatedOperationCompleted);
            }
            this.InvokeAsync("TestAuthenticated", new object[0], this.TestAuthenticatedOperationCompleted, userState);
        }
        
        private void OnTestAuthenticatedOperationCompleted(object arg) {
            if ((this.TestAuthenticatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestAuthenticatedCompleted(this, new TestAuthenticatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetCoaDocumentsCompletedEventHandler(object sender, GetCoaDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoaDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoaDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DocumentNames {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetCoaDocumentsByAppCompletedEventHandler(object sender, GetCoaDocumentsByAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCoaDocumentsByAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCoaDocumentsByAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string DocumentNames {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetMSDSDocumentsCompletedEventHandler(object sender, GetMSDSDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMSDSDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMSDSDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string MSDSDocumentName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void TestAuthenticatedCompletedEventHandler(object sender, TestAuthenticatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestAuthenticatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestAuthenticatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591